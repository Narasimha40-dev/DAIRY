import React, { useState } from "react";
import { FaFileAlt, FaCalendarAlt, FaUser, FaRupeeSign, FaSearch, FaChartBar, FaDownload, FaTrash, FaEdit } from "react-icons/fa";

// Sample initial data with examples
const initialReports = []; // Start with empty array, no past saved data

export default function Reports({ darkMode }) {
  const [reports, setReports] = useState(initialReports);
  const [search, setSearch] = useState("");
  const [form, setForm] = useState({
    reportTitle: "",
    reportType: "",
    startDate: "",
    endDate: "",
    generatedBy: "",
    totalAmount: "",
    notes: "",
  });
  const [formErrors, setFormErrors] = useState({});
  const [editId, setEditId] = useState(null);

  // Filtered reports
  const filteredReports = reports.filter(
    (r) =>
      r.reportTitle?.toUpperCase().includes(search.toUpperCase()) ||
      r.reportType?.toUpperCase().includes(search.toUpperCase()) ||
      r.generatedBy?.toUpperCase().includes(search.toUpperCase())
  );

  // Validation
  function validate() {
    const errors = {};
    // REPORT TITLE: Required, alphabets only, first letter capital
    if (!form.reportTitle.trim()) errors.reportTitle = "Report title is required";
    else if (!/^[A-Z][a-zA-Z\s]*$/.test(form.reportTitle.trim()))
      errors.reportTitle = "Title must start with a capital letter and contain alphabets only";
    // REPORT TYPE
    if (!form.reportType) errors.reportType = "Report type is required";
    // START DATE
    if (!form.startDate) errors.startDate = "Start date is required";
    // END DATE
    if (!form.endDate) errors.endDate = "End date is required";
    if (form.endDate && form.startDate && form.endDate < form.startDate)
      errors.endDate = "End date cannot be before start date";
    // GENERATED BY: Required, alphabets only, first letter capital
    if (!form.generatedBy.trim()) errors.generatedBy = "Generated by is required";
    else if (!/^[A-Z][a-zA-Z\s]*$/.test(form.generatedBy.trim()))
      errors.generatedBy = "Name must start with a capital letter and contain alphabets only";
    // TOTAL AMOUNT
    if (form.totalAmount !== "" && (isNaN(form.totalAmount) || Number(form.totalAmount) < 0))
      errors.totalAmount = "Total amount must be a positive number";
    // NOTES: Optional, alphabets only, first letter capital, max 100 chars
    if (form.notes && !/^[A-Z][a-zA-Z\s]*$/.test(form.notes.trim()))
      errors.notes = "Notes must start with a capital letter and contain alphabets only";
    if (form.notes && form.notes.length > 100)
      errors.notes = "Notes must be less than 100 characters";
    return errors;
  }

  // Handle form change
  function handleChange(e) {
    const { id, value } = e.target;
    // For the specified fields, capitalize first letter and allow only alphabets and spaces
    if (["reportTitle", "generatedBy", "notes"].includes(id)) {
      let formatted = value.replace(/[^a-zA-Z\s]/g, "");
      if (formatted.length > 0) {
        formatted = formatted.charAt(0).toUpperCase() + formatted.slice(1);
      }
      setForm((prev) => ({
        ...prev,
        [id]: formatted,
      }));
    } else {
      setForm((prev) => ({
        ...prev,
        [id]: value,
      }));
    }
  }

  // Handle submit
  function handleSubmit(e) {
    e.preventDefault();
    const errors = validate();
    setFormErrors(errors);
    if (Object.keys(errors).length > 0) return;

    if (editId) {
      setReports((prev) =>
        prev.map((r) =>
          r.id === editId
            ? {
                ...r,
                ...form,
                totalAmount: form.totalAmount ? Number(form.totalAmount) : "",
              }
            : r
        )
      );
    } else {
      const newId = reports.length > 0 ? Math.max(...reports.map((r) => r.id)) + 1 : 1;
      setReports((prev) => [
        ...prev,
        {
          ...form,
          id: newId,
          generatedOn: new Date().toLocaleDateString(),
          totalAmount: form.totalAmount ? Number(form.totalAmount) : "",
        },
      ]);
    }
    setForm({
      reportTitle: "",
      reportType: "",
      startDate: "",
      endDate: "",
      generatedBy: "",
      totalAmount: "",
      notes: "",
    });
    setEditId(null);
    setFormErrors({});
  }

  // Edit
  function handleEdit(id) {
    const report = reports.find((r) => r.id === id);
    if (report) {
      setForm({
        reportTitle: report.reportTitle,
        reportType: report.reportType,
        startDate: report.startDate,
        endDate: report.endDate,
        generatedBy: report.generatedBy,
        totalAmount: report.totalAmount,
        notes: report.notes || "",
      });
      setEditId(id);
      window.scrollTo({ top: 0, behavior: "smooth" });
    }
  }

  // Delete
  function handleDelete(id) {
    if (window.confirm("Are you sure you want to delete this report?")) {
      setReports((prev) => prev.filter((r) => r.id !== id));
      if (editId === id) {
        setEditId(null);
        setForm({
          reportTitle: "",
          reportType: "",
          startDate: "",
          endDate: "",
          generatedBy: "",
          totalAmount: "",
          notes: "",
        });
      }
    }
  }

  // Clear form
  function handleClear() {
    setForm({
      reportTitle: "",
      reportType: "",
      startDate: "",
      endDate: "",
      generatedBy: "",
      totalAmount: "",
      notes: "",
    });
    setEditId(null);
    setFormErrors({});
  }

  // Download (dummy)
  function handleDownload(report) {
    alert(`Download for "${report.reportTitle}" is not implemented in this demo.`);
  }

  // --- Dark mode styles ---
  const bgGradient = darkMode
    ? "linear-gradient(135deg, #232946 0%, #16161a 100%)"
    : "linear-gradient(135deg, #f8ffae 0%, #43c6ac 100%)";
  const cardBg = darkMode ? "rgba(35,41,70,0.97)" : "rgba(255,255,255,0.97)";
  const headerBg = darkMode ? "linear-gradient(90deg, #393e6e 0%, #232946 100%)" : "linear-gradient(90deg, #11998e 0%, #38ef7d 100%)";
  const headerColor = darkMode ? "#b2fefa" : "white";
  const formBg = darkMode ? "#232946" : "white";
  const formText = darkMode ? "#b2fefa" : "#2c3e50";
  const thBg = darkMode ? "#393e6e" : "#43c6ac";
  const thColor = "#fff";
  const tableBg = darkMode ? "#232946" : "white";
  const inputBg = darkMode ? "#16161a" : "#fff";
  const inputColor = darkMode ? "#fff" : "#232946";
  const inputBorder = darkMode ? "#393e6e" : "#e0e0e0";
  const btnBg = darkMode ? "#393e6e" : "#43c6ac";
  const btnColor = "#fff";

  return (
    <div style={{
      fontFamily: "Arial, sans-serif",
      background: bgGradient,
      minHeight: "100vh",
      padding: 20,
      color: darkMode ? "#fff" : "#232946",
      transition: "background 0.3s, color 0.3s"
    }}>
      <div style={{
        maxWidth: 1400,
        margin: "0 auto",
        background: cardBg,
        borderRadius: 20,
        boxShadow: darkMode ? "0 20px 40px rgba(35,41,70,0.18)" : "0 20px 40px rgba(0,0,0,0.08)",
        overflow: "hidden"
      }}>
        <div style={{
          background: headerBg,
          color: headerColor,
          padding: 18,
          textAlign: "center",
          boxShadow: "0 4px 15px rgba(0,0,0,0.08)"
        }}>
          <h1 style={{
            fontSize: "1.6rem",
            marginBottom: 6,
            textShadow: darkMode ? "0 2px 4px #232946" : "0 2px 4px rgba(0,0,0,0.10)"
          }}>
            <FaFileAlt style={{ marginRight: 8, verticalAlign: "middle" }} />
            REPORTS DASHBOARD
          </h1>
          <p style={{ letterSpacing: 1, fontSize: "1rem" }}>Generate, View, and Download Dairy Reports</p>
        </div>

        {/* Add New Report Form */}
        <div style={{
          maxWidth: 600,
          margin: "0 auto 40px auto",
          background: formBg,
          color: formText,
          padding: 30,
          borderRadius: 15,
          boxShadow: darkMode ? "0 8px 25px rgba(35,41,70,0.18)" : "0 8px 25px rgba(0,0,0,0.08)",
        }}>
          <h2 style={{
            color: formText,
            marginBottom: 25,
            fontSize: "1.3rem",
            borderBottom: `3px solid ${btnBg}`,
            paddingBottom: 10,
            display: "flex",
            alignItems: "center",
            gap: 10,
            justifyContent: "center"
          }}>
            <FaChartBar />
            {editId ? "EDIT REPORT" : "ADD NEW REPORT"}
          </h2>
          <form onSubmit={handleSubmit} autoComplete="off">
            <FormGroup
              label="REPORT TITLE *"
              id="reportTitle"
              value={form.reportTitle}
              onChange={handleChange}
              error={formErrors.reportTitle}
              required
              icon={<FaFileAlt />}
              placeholder="E.g. MONTHLY SALES"
              darkMode={darkMode}
            />
            <FormGroup
              label="REPORT TYPE *"
              id="reportType"
              type="select"
              options={[
                { label: "SALES REPORT" },
                { label: "PAYMENTS REPORT" },
                { label: "FARMERS REPORT" },
                { label: "COLLECTION REPORT" },
                { label: "EXPENSE REPORT" },
                { label: "CUSTOM" },
              ]}
              value={form.reportType}
              onChange={handleChange}
              error={formErrors.reportType}
              required
              icon={<FaChartBar />}
              darkMode={darkMode}
            />
            <FormGroup
              label="START DATE *"
              id="startDate"
              type="date"
              value={form.startDate}
              onChange={handleChange}
              error={formErrors.startDate}
              required
              icon={<FaCalendarAlt />}
              darkMode={darkMode}
            />
            <FormGroup
              label="END DATE *"
              id="endDate"
              type="date"
              value={form.endDate}
              onChange={handleChange}
              error={formErrors.endDate}
              required
              icon={<FaCalendarAlt />}
              darkMode={darkMode}
            />
            <FormGroup
              label="GENERATED BY *"
              id="generatedBy"
              value={form.generatedBy}
              onChange={handleChange}
              error={formErrors.generatedBy}
              required
              icon={<FaUser />}
              placeholder="E.g. ADMIN"
              darkMode={darkMode}
            />
            <FormGroup
              label="TOTAL AMOUNT"
              id="totalAmount"
              type="number"
              min="0"
              step="0.01"
              value={form.totalAmount}
              onChange={handleChange}
              error={formErrors.totalAmount}
              icon={<FaRupeeSign />}
              placeholder="E.g. 120000"
              darkMode={darkMode}
            />
            <FormGroup
              label="NOTES"
              id="notes"
              value={form.notes}
              onChange={handleChange}
              error={formErrors.notes}
              icon={<FaFileAlt />}
              placeholder="E.g. JUNE SALES SUMMARY"
              darkMode={darkMode}
            />
            <div style={{ marginTop: 20, textAlign: "center" }}>
              <button type="submit" className="btn btn-primary" style={{
                ...btnStyle,
                background: btnBg,
                color: btnColor
              }}>
                {editId ? "UPDATE REPORT" : "SAVE REPORT"}
              </button>
              {editId && (
                <button type="button" className="btn btn-secondary" style={{
                  ...btnStyle,
                  background: darkMode ? "#232946" : "#e0e0e0",
                  color: darkMode ? "#b2fefa" : "#232946"
                }} onClick={handleClear}>
                  CANCEL
                </button>
              )}
              <button type="button" className="btn btn-secondary" style={{
                ...btnStyle,
                background: darkMode ? "#232946" : "#e0e0e0",
                color: darkMode ? "#b2fefa" : "#232946"
              }} onClick={handleClear}>
                CLEAR FORM
              </button>
            </div>
          </form>
        </div>

        {/* Reports Table */}
        <div style={{
          background: tableBg,
          borderRadius: 15,
          boxShadow: darkMode ? "0 8px 25px rgba(35,41,70,0.18)" : "0 8px 25px rgba(0,0,0,0.1)",
          overflow: "hidden",
          margin: "0 30px 30px 30px"
        }}>
          <div className="table-header" style={{
            background: thBg,
            color: thColor,
            padding: "20px 30px"
          }}>
            <h2 style={{ margin: 0, fontSize: "1.3rem", display: "flex", alignItems: "center", gap: 10 }}>
              <FaFileAlt style={{ marginRight: 4, verticalAlign: "middle" }} />
              REPORT RECORDS
            </h2>
          </div>
          <div className="search-filter" style={{
            background: tableBg,
            padding: 20,
            borderRadius: 10,
            marginBottom: 20,
            boxShadow: darkMode ? "0 4px 15px rgba(35,41,70,0.13)" : "0 4px 15px rgba(0,0,0,0.1)"
          }}>
            <input
              type="text"
              placeholder="SEARCH BY TITLE, TYPE, OR GENERATOR..."
              value={search}
              onChange={e => setSearch(e.target.value)}
              style={{
                width: "100%",
                padding: "12px 15px",
                border: `2px solid ${inputBorder}`,
                borderRadius: 8,
                fontSize: "1rem",
                background: inputBg,
                color: inputColor,
                transition: "background 0.3s, color 0.3s, border-color 0.3s"
              }}
            />
          </div>
          <div className="table-container" style={{
            overflowX: "auto",
            maxHeight: 600,
            overflowY: "auto"
          }}>
            <table style={{ width: "100%", borderCollapse: "collapse", background: tableBg, color: inputColor }}>
              <thead>
                <tr>
                  <th style={{
                    ...thStyle,
                    background: thBg,
                    color: thColor
                  }}>TITLE</th>
                  <th style={{
                    ...thStyle,
                    background: thBg,
                    color: thColor
                  }}>TYPE</th>
                  <th style={{
                    ...thStyle,
                    background: thBg,
                    color: thColor
                  }}>START DATE</th>
                  <th style={{
                    ...thStyle,
                    background: thBg,
                    color: thColor
                  }}>END DATE</th>
                  <th style={{
                    ...thStyle,
                    background: thBg,
                    color: thColor
                  }}>GENERATED BY</th>
                  <th style={{
                    ...thStyle,
                    background: thBg,
                    color: thColor
                  }}>GENERATED ON</th>
                  <th style={{
                    ...thStyle,
                    background: thBg,
                    color: thColor
                  }}>TOTAL AMOUNT</th>
                  <th style={{
                    ...thStyle,
                    background: thBg,
                    color: thColor
                  }}>NOTES</th>
                  <th style={{
                    ...thStyle,
                    background: thBg,
                    color: thColor
                  }}>ACTIONS</th>
                </tr>
              </thead>
              <tbody>
                {filteredReports.map((r) => (
                  <tr key={r.id} style={{ transition: "background-color 0.3s" }}>
                    <td>{r.reportTitle}</td>
                    <td>{r.reportType}</td>
                    <td>{r.startDate}</td>
                    <td>{r.endDate}</td>
                    <td>{r.generatedBy}</td>
                    <td>{r.generatedOn}</td>
                    <td>{r.totalAmount !== "" ? `₹${Number(r.totalAmount).toLocaleString()}` : "-"}</td>
                    <td>{r.notes || "-"}</td>
                    <td style={{ display: "flex", gap: 5 }}>
                      <button
                        className="btn btn-warning btn-sm"
                        style={{
                          ...btnSmStyle,
                          background: darkMode ? "#393e6e" : "#ffc107",
                          color: darkMode ? "#fff" : "#232946"
                        }}
                        onClick={() => handleEdit(r.id)}
                        title="Edit"
                      >
                        <FaEdit />
                      </button>
                      <button
                        className="btn btn-danger btn-sm"
                        style={{
                          ...btnSmStyle,
                          background: darkMode ? "#e53935" : "#e53935",
                          color: "#fff"
                        }}
                        onClick={() => handleDelete(r.id)}
                        title="Delete"
                      >
                        <FaTrash />
                      </button>
                      <button
                        className="btn btn-success btn-sm"
                        style={{
                          ...btnSmStyle,
                          background: darkMode ? "#38d9a9" : "#43c6ac",
                          color: "#fff"
                        }}
                        onClick={() => handleDownload(r)}
                        title="Download"
                      >
                        <FaDownload />
                      </button>
                    </td>
                  </tr>
                ))}
                {filteredReports.length === 0 && (
                  <tr>
                    <td colSpan={9} style={{ textAlign: "center", color: "#888", padding: 30 }}>
                      No reports found.
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  );
}

// --- Helper Components and Styles ---
function FormGroup({
  label,
  id,
  type = "text",
  value,
  onChange,
  error,
  options,
  icon,
  darkMode,
  ...rest
}) {
  const inputBg = darkMode ? "#16161a" : "#fff";
  const inputColor = darkMode ? "#fff" : "#232946";
  const inputBorder = darkMode ? "#393e6e" : "#e0e0e0";
  return (
    <div className="form-group" style={{ marginBottom: 20 }}>
      <label htmlFor={id} style={{
        display: "block",
        marginBottom: 8,
        color: darkMode ? "#b2fefa" : "#2c3e50",
        fontWeight: 600,
        textTransform: "uppercase",
        fontSize: "0.9rem"
      }}>
        {icon && <span style={{ marginRight: 6, verticalAlign: "middle" }}>{icon}</span>}
        {label}
      </label>
      {type === "select" ? (
        <select
          id={id}
          value={value}
          onChange={onChange}
          style={{
            width: "100%",
            padding: "12px 15px",
            border: `2px solid ${error ? "#e74c3c" : inputBorder}`,
            borderRadius: 8,
            fontSize: "1rem",
            background: inputBg,
            color: inputColor,
            transition: "background 0.3s, color 0.3s, border-color 0.3s",
            boxShadow: error
              ? "0 0 0 3px rgba(231, 76, 60, 0.1)"
              : undefined,
            outline: "none",
          }}
          {...rest}
        >
          <option value="">SELECT {label.replace("*", "").trim().toUpperCase()}</option>
          {options.map((opt) =>
            typeof opt === "string" ? (
              <option key={opt} value={opt}>{opt}</option>
            ) : (
              <option key={opt.label} value={opt.label}>{opt.label}</option>
            )
          )}
        </select>
      ) : (
        <input
          id={id}
          type={type}
          value={value}
          onChange={onChange}
          style={{
            width: "100%",
            padding: "12px 15px",
            border: `2px solid ${error ? "#e74c3c" : inputBorder}`,
            borderRadius: 8,
            fontSize: "1rem",
            background: inputBg,
            color: inputColor,
            transition: "background 0.3s, color 0.3s, border-color 0.3s",
            boxShadow: error
              ? "0 0 0 3px rgba(231, 76, 60, 0.1)"
              : undefined,
            outline: "none",
          }}
          {...rest}
        />
      )}
      {error && (
        <div className="error-message" style={{
          color: "#e74c3c",
          fontSize: "0.9rem",
          marginTop: 5,
          display: "block"
        }}>{error}</div>
      )}
    </div>
  );
}

// --- Inline Styles ---
const thStyle = {
  background: "#43c6ac",
  color: "white",
  padding: 15,
  textAlign: "left",
  fontWeight: 600,
  textTransform: "uppercase",
  fontSize: "0.9rem",
  position: "sticky",
  top: 0,
  zIndex: 10,
};
const btnStyle = {
  padding: "12px 25px",
  border: "none",
  borderRadius: 8,
  fontSize: "1rem",
  fontWeight: 600,
  cursor: "pointer",
  textTransform: "uppercase",
  marginRight: 10,
  marginBottom: 10,
};
const btnSmStyle = {
  padding: "6px 12px",
  fontSize: "0.8rem",
  border: "none",
  borderRadius: 8,
  fontWeight: 600,
  cursor: "pointer",
  textTransform: "uppercase",
  display: "flex",
  alignItems: "center",
  gap: 4,
};